name: Release Windows

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g. 1.0.3)'
        required: false

  push:
    tags:
      - 'v*'

jobs:
  build-and-release:
    runs-on: windows-latest
    env:
      GH_TOKEN: ${{ secrets.GH_TOKEN }}

    steps:
      - name: Validate GitHub Token
        shell: bash
        run: |
          if ! gh auth status >/dev/null 2>&1; then
            echo "Invalid GitHub token. Exiting..." >&2
            exit 1
          fi
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Set RELEASE_VERSION env var
        shell: bash
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            echo "RELEASE_VERSION=v${{ github.event.inputs.version }}" >> $GITHUB_ENV
          else
            echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          fi

      - name: Check if release exists
        id: check-release
        shell: bash
        run: |
          if gh release view "$RELEASE_VERSION" >/dev/null 2>&1; then
            echo "release-exists=true" >> $GITHUB_OUTPUT
            echo "Release $RELEASE_VERSION already exists"
          else
            echo "release-exists=false" >> $GITHUB_OUTPUT
            echo "Release $RELEASE_VERSION does not exist, proceeding with build"
          fi
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Checkout repository (with submodules)
        if: steps.check-release.outputs.release-exists == 'false'
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Node.js
        if: steps.check-release.outputs.release-exists == 'false'
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup Python
        if: steps.check-release.outputs.release-exists == 'false'
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Setup Rust
        if: steps.check-release.outputs.release-exists == 'false'
        uses: dtolnay/rust-toolchain@stable

      - name: Install ImageMagick (for Rust binary)
        if: steps.check-release.outputs.release-exists == 'false'
        shell: pwsh
        run: |
          # Download and install ImageMagick portable (latest version)
          $url = "https://download.imagemagick.org/ImageMagick/download/binaries/ImageMagick-7.1.2-0-portable-Q16-x64.zip"
          $output = "$env:TEMP\imagemagick.zip"
          Write-Host "Downloading ImageMagick from $url"
          Invoke-WebRequest -Uri $url -OutFile $output
          Write-Host "Extracting ImageMagick to C:\ImageMagick"
          Expand-Archive -Path $output -DestinationPath "C:\ImageMagick-temp" -Force
          Move-Item "C:\ImageMagick-temp\*" "C:\ImageMagick" -Force
          Remove-Item "C:\ImageMagick-temp" -Recurse -Force
          # Add to PATH for current session
          $env:PATH = "C:\ImageMagick;$env:PATH"
          echo "C:\ImageMagick" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          # Verify installation
          if (Test-Path "C:\ImageMagick\magick.exe") {
            Write-Host "ImageMagick installed successfully"
            & "C:\ImageMagick\magick.exe" -version
          } else {
            Write-Error "ImageMagick installation failed - magick.exe not found"
          }

      - name: Install libvips (for Rust binary)
        if: steps.check-release.outputs.release-exists == 'false'
        shell: pwsh
        run: |
          # Download and install libvips
          $url = "https://github.com/libvips/build-win64-mxe/releases/download/v8.17.1/vips-dev-w64-web-8.17.1.zip"
          $output = "$env:TEMP\vips.zip"
          $tempDir = "C:\vips-temp"
          $finalDir = "C:\vips"

          Invoke-WebRequest -Uri $url -OutFile $output
          Expand-Archive -Path $output -DestinationPath $tempDir -Force
          Move-Item "$tempDir\*" $finalDir -Force
          Remove-Item $tempDir -Recurse -Force

          $vipsExe = Get-ChildItem -Path $finalDir -Recurse -Filter "vips.exe" | Select-Object -First 1
          if ($vipsExe) {
            $vipsBin = $vipsExe.Directory.FullName
            echo $vipsBin | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
            Write-Host "libvips installed successfully"
            & "$vipsExe" --version
          } else {
            Write-Error "libvips installation failed - vips.exe not found"
          }

      - name: Build Rust binary
        if: steps.check-release.outputs.release-exists == 'false'
        shell: bash
        run: |
          echo "Verifying tools are in PATH before building Rust binary..."
          which magick || echo "Warning: magick not found in PATH"
          which vips || echo "Warning: vips not found in PATH"
          echo "Building Rust binary..."
          cd src/projects/project4/rust/space_media_optimizer
          cargo build --release
          echo "Testing Rust binary..."
          ./target/release/media-optimizer.exe --help || echo "Rust binary help completed"

      - name: Download optimization tools
        if: steps.check-release.outputs.release-exists == 'false'
        shell: pwsh
        run: |
          # Create tools directory structure
          New-Item -ItemType Directory -Force -Path "src\tools\windows" | Out-Null
          
          Write-Host "Downloading WebP tools..."
          $webpUrl = "https://storage.googleapis.com/downloads.webmproject.org/releases/webp/libwebp-1.3.2-windows-x64.zip"
          $webpZip = "$env:TEMP\webp.zip"
          Invoke-WebRequest -Uri $webpUrl -OutFile $webpZip -TimeoutSec 60
          Expand-Archive -Path $webpZip -DestinationPath "$env:TEMP\webp" -Force
          Copy-Item "$env:TEMP\webp\libwebp-1.3.2-windows-x64\bin\cwebp.exe" -Destination "src\tools\windows\cwebp.exe" -Force
          
          Write-Host "Downloading mozjpeg..."
          $mozjpegUrl = "https://github.com/mozilla/mozjpeg/releases/download/v4.1.5/mozjpeg-4.1.5-windows.zip"
          $mozjpegZip = "$env:TEMP\mozjpeg.zip"
          Invoke-WebRequest -Uri $mozjpegUrl -OutFile $mozjpegZip -TimeoutSec 60
          Expand-Archive -Path $mozjpegZip -DestinationPath "$env:TEMP\mozjpeg" -Force
          Copy-Item "$env:TEMP\mozjpeg\mozjpeg-4.1.5-windows\bin\cjpeg.exe" -Destination "src\tools\windows\cjpeg.exe" -Force
          Copy-Item "$env:TEMP\mozjpeg\mozjpeg-4.1.5-windows\bin\djpeg.exe" -Destination "src\tools\windows\djpeg.exe" -Force
          
          Write-Host "Downloading oxipng..."
          $oxipngUrl = "https://github.com/shssoichiro/oxipng/releases/download/v9.0.0/oxipng-9.0.0-x86_64-pc-windows-msvc.zip"
          $oxipngZip = "$env:TEMP\oxipng.zip"
          Invoke-WebRequest -Uri $oxipngUrl -OutFile $oxipngZip -TimeoutSec 60
          Expand-Archive -Path $oxipngZip -DestinationPath "$env:TEMP\oxipng" -Force
          Copy-Item "$env:TEMP\oxipng\oxipng.exe" -Destination "src\tools\windows\oxipng.exe" -Force
          
          Write-Host "Downloading FFmpeg..."
          $ffmpegUrl = "https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-essentials.zip"
          $ffmpegZip = "$env:TEMP\ffmpeg.zip"
          Invoke-WebRequest -Uri $ffmpegUrl -OutFile $ffmpegZip -TimeoutSec 120
          Expand-Archive -Path $ffmpegZip -DestinationPath "$env:TEMP\ffmpeg" -Force
          $ffmpegExe = Get-ChildItem -Path "$env:TEMP\ffmpeg" -Recurse -Filter "ffmpeg.exe" | Select-Object -First 1
          if ($ffmpegExe) {
            Copy-Item $ffmpegExe.FullName -Destination "src\tools\windows\ffmpeg.exe" -Force
          }
          
          # Create manifest for Windows tools
          $manifest = @{
            platform = "windows"
            arch = "x64"
            tools = @("cwebp", "cjpeg", "djpeg", "oxipng", "ffmpeg")
            generated = (Get-Date).ToString("yyyy-MM-ddTHH:mm:ss.fffZ")
          } | ConvertTo-Json
          $manifest | Out-File -FilePath "src\tools\windows\manifest.json" -Encoding UTF8
          
          Write-Host "Tools downloaded successfully:"
          Get-ChildItem -Path "src\tools\windows" -Name

      - name: Workaround node-gyp python path (symlink)
        if: steps.check-release.outputs.release-exists == 'false'
        shell: pwsh
        run: |
          $py = "${{ steps.setup-python.outputs.python-path }}"
          New-Item -ItemType Directory -Force -Path 'C:\usr\bin' | Out-Null
          New-Item -ItemType SymbolicLink -Path 'C:\usr\bin\python' -Target $py -Force

      - name: Set PYTHON env variable for native builds
        if: steps.check-release.outputs.release-exists == 'false'
        run: echo "PYTHON=${{ steps.setup-python.outputs.python-path }}" >> $GITHUB_ENV

      - name: Add Python to PATH
        if: steps.check-release.outputs.release-exists == 'false'
        run: echo "PATH=$(dirname '${{ steps.setup-python.outputs.python-path }}'):$PATH" >> $GITHUB_ENV

      - name: Install dependencies (npm)
        if: steps.check-release.outputs.release-exists == 'false'
        run: npm install --ignore-scripts

      - name: Install vips dependencies
        if: steps.check-release.outputs.release-exists == 'false'
        run: node scripts/download-libvips-win.js

      - name: Setup Python embedded
        if: steps.check-release.outputs.release-exists == 'false'
        run: node scripts/embed-python-win.js

      - name: Build Vue renderer
        if: steps.check-release.outputs.release-exists == 'false'
        run: npm run vite:build

      - name: Build Electron app
        if: steps.check-release.outputs.release-exists == 'false'
        run: npm run build
        env:
          ELECTRON_REBUILD: false
          npm_config_rebuild: false
          PYTHON: ${{ env.PYTHON }}

      - name: Upload artifact
        if: steps.check-release.outputs.release-exists == 'false'
        uses: actions/upload-artifact@v4
        with:
          name: scripta-image-processing-win
          path: dist/*.exe

      - name: Create GitHub release
        if: steps.check-release.outputs.release-exists == 'false'
        shell: bash
        run: |
          gh release create "$RELEASE_VERSION" dist/*.exe \
            --title "$RELEASE_VERSION" \
            --notes "Release $RELEASE_VERSION" \
            --verify-tag
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Skip build - release exists
        if: steps.check-release.outputs.release-exists == 'true'
        run: echo "Skipping build as release $RELEASE_VERSION already exists"

