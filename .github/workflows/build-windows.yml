name: Release Windows

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g. 1.0.3)'
        required: false

  push:
    tags:
      - 'v*'

jobs:
  build-and-release:
    runs-on: windows-latest
    env:
      GH_TOKEN: ${{ secrets.GH_TOKEN }}

    steps:
      - name: Set RELEASE_VERSION env var
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            echo "RELEASE_VERSION=v${{ github.event.inputs.version }}" >> $GITHUB_ENV
          else
            echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          fi

      - name: Checkout repository (with submodules)
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup Python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Workaround node-gyp python path (symlink)
        shell: pwsh
        run: |
          $py = "${{ steps.setup-python.outputs.python-path }}"
          New-Item -ItemType Directory -Force -Path 'C:\usr\bin' | Out-Null
          New-Item -ItemType SymbolicLink -Path 'C:\usr\bin\python' -Target $py -Force

      - name: Set PYTHON env variable for native builds
        run: echo "PYTHON=${{ steps.setup-python.outputs.python-path }}" >> $GITHUB_ENV

      - name: Add Python to PATH
        run: echo "PATH=$(dirname '${{ steps.setup-python.outputs.python-path }}'):$PATH" >> $GITHUB_ENV

      - name: Install dependencies (npm)
        run: npm install --ignore-scripts

      - name: Install vips dependencies
        run: node scripts/download-libvips-win.js

      - name: Setup Python embedded
        run: node scripts/embed-python-win.js

      - name: Build Electron app
        run: npm run build
        env:
          ELECTRON_REBUILD: false
          npm_config_rebuild: false
          PYTHON: ${{ env.PYTHON }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: scripta-image-processing-win
          path: dist/*.exe

      - name: Create GitHub release
        run: gh release create "$RELEASE_VERSION" dist/*.exe --title "$RELEASE_VERSION" --notes "Release $RELEASE_VERSION"
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

